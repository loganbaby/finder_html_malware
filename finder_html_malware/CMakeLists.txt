cmake_minimum_required (VERSION 3.8)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fuse-ld=gold")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_PREFIX_PATH "C:\\Qt\\Qt5.12.12\\5.12.12\\msvc2017_64")

find_package(QT NAMES Qt6 Qt5 COMPONENTS Widgets REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets REQUIRED)

include(FetchContent)
FetchContent_Declare(cpr GIT_REPOSITORY https://github.com/libcpr/cpr.git
                         GIT_TAG 6ea2dec23c3df14ac3b27b7d2d6bbff0cb7ba1b0)
FetchContent_MakeAvailable(cpr)

set(PROJECT_SOURCES
	main.cpp
	PageGetter.cpp
    convert.cpp
    fishingAnalyze.cpp
)

set(PROJECT_HEADERS
	PageGetter.h
    convert.h
    analyze.h
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(finder_html_malware
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES} ${PROJECT_HEADERS}
    )

else()
    if(ANDROID)
        add_library(finder_html_malware SHARED
            ${PROJECT_SOURCES} ${PROJECT_HEADERS}
        )

    else()
        add_executable(finder_html_malware
            ${PROJECT_SOURCES} ${PROJECT_HEADERS}
        )
    endif()
endif()

target_link_libraries(finder_html_malware PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
target_link_libraries(finder_html_malware PRIVATE cpr::cpr)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(finder_html_malware)
endif()