#include "PageGetter.h"

#include <AtlBase.h>
#include <AtlCom.h>
#include <UIAutomation.h>

#include "cpr/cpr.h"
#include "convert.h"

#define DEBUG false

#if DEBUG
#include <iostream>
#endif

Get::ChromeGetter::ChromeGetter() {
  CoInitialize(nullptr);
}
Get::ChromeGetter::~ChromeGetter() { CoUninitialize(); }

BSTR Get::ChromeGetter::getActivePageLink() const {
  HWND hwnd = nullptr;

  while (true) {
    hwnd = FindWindowEx(0, hwnd, "Chrome_WidgetWin_1", nullptr);

    if (!hwnd) break;
    if (!IsWindowVisible(hwnd)) continue;

    CComQIPtr<IUIAutomation> uia;
    if (FAILED(uia.CoCreateInstance(CLSID_CUIAutomation)) || !uia) break;

    CComPtr<IUIAutomationElement> root;
    if (FAILED(uia->ElementFromHandle(hwnd, &root)) || !root) break;

    CComPtr<IUIAutomationCondition> condition;

    uia->CreatePropertyCondition(UIA_ControlTypePropertyId, CComVariant(0xC354),
                                 &condition);

    CComPtr<IUIAutomationElement> edit;
    if (FAILED(root->FindFirst(TreeScope_Descendants, condition, &edit)) ||
        !edit)
      continue;

    CComVariant url;
    edit->GetCurrentPropertyValue(UIA_ValueValuePropertyId, &url);

    return url.bstrVal;
  }
}

void Get::ChromeGetter::savePage() {
  cpr::Response response =
      cpr::Get(cpr::Url(Convert::ConvertBSTRToMBS(getActivePageLink()).c_str()));

  #if DEBUG
  std::cout << response.text;
  #endif
}